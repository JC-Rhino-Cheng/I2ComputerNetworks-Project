//client程式編輯命令：
g++ -std=c++11 client.cpp -o client 


//server程式編輯命令：
g++ -std=c++11 server.cpp -o server 







//以下摘取自Report裡面的Experience的某些段落

	另外，我在這次project有個滿奇怪的體驗，而且至今無法理解成因為何。就是，假設「編譯server -> 編譯client -> 執行server -> 執行client」是一組動作，我假設這組動作叫做A組。那我同一份code，去做第一次A組動作，client會顯示ErrCode=-1，代表連接失敗。同份code不變，再去做一次A組動作，client依然ErrCode=-1。不甘心，再做一次，可能就ErrCode=0，也就是成功了，也有可能依然ErrCode=-1，代表失敗。

	就是，我這次project所遭遇到的怪現象是，明明就是同一份code，編譯第一次(假設運作失敗)，那就編譯第二次(假設運作還是失敗)，那就編譯第三次(假設運作還是還是失敗)，那就4-th, 5-th ,6-th, ……, n-th，反正總有一次會運作成功。而且只要那次的編譯是可以運作成功的，那接下來我client斷線之後要重新連接server，是完全沒問題的，無論斷幾次重新連接幾次，都是正確的。即便我現在把成功運作的server關掉，只要不重新編譯，那我再打開一次server，那client也一定會成功連接。

	平均而言，我大概是(剛剛所說的A組動作)做3~5次，就會可以client成功連接。

	但因為我明明是同一份code去編譯啊？我根本沒改啊？那到底是怎麼回事？難道跟server端電腦以及client端電腦(這個project裡面，我的server端電腦和client端電腦是同一個)當時的狀況有關係嗎？可是我只要不重新編譯，我每次重run這些程式，都是可以正確運作的ㄟ?這樣應該跟電腦當下的狀況無關吧，到底怎麼回事？

	不 得 而 知。

	而且，我必須嚴厲對這種情形作出很強烈的指控。就是因為這種情形，害我初初初初初初期階段一開始在建構socket的時候，就遭遇各種各種困難。我是用C++寫code，而C++的開頭通常會寫using namespace std;，我實在沒辦法，就一行一行註解掉看看哪裡刪掉的話程式可以正常運作，然後就鎖定這行。所以在那之後，我就沒有用這行，所以，code裡面原本可以很精簡的cout，我都要寫std::cout。string，我都要寫std::string。endl，我都要寫std::endl。族繁不及備載。

	總之，根據剛剛所說的「平均3~5次可以client成功連接」這個後來累積的經驗值，我覺得using namespace std應該是被我誤會了，用這行應該是不會影響code的正確性。
